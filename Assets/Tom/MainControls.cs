//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/MainControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MainControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MainControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MainControls"",
    ""maps"": [
        {
            ""name"": ""Vampire"",
            ""id"": ""ab1eb040-ddae-4ff2-a0c9-ab2833a70699"",
            ""actions"": [
                {
                    ""name"": ""MoveKeyboard"",
                    ""type"": ""Value"",
                    ""id"": ""c9b5ff33-d851-4b13-8765-c5c5b5dda8d4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseClick"",
                    ""type"": ""Button"",
                    ""id"": ""c50802cd-e8af-4bc4-83bf-6426f12accbc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""8a501a0f-f5e9-444b-a3f8-db0710ecda27"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""528f59c2-b98b-42ba-b19a-e16c9056eaa8"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveKeyboard"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""06ef41ba-47bc-4aba-a773-e2f44cad6fd6"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveKeyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""8b8490f6-0df1-4708-a677-800f33d99616"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveKeyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""87e1ae6b-d71c-4c65-8344-b62be9c8d48c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveKeyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""6438063d-02ed-44f6-b7dd-43a077dca2d6"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveKeyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""8ae4fc09-b410-4b61-80a6-450c658beb93"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""135da3d4-d0dc-424e-a556-b3a492e761e8"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Vampire
        m_Vampire = asset.FindActionMap("Vampire", throwIfNotFound: true);
        m_Vampire_MoveKeyboard = m_Vampire.FindAction("MoveKeyboard", throwIfNotFound: true);
        m_Vampire_MouseClick = m_Vampire.FindAction("MouseClick", throwIfNotFound: true);
        m_Vampire_MousePosition = m_Vampire.FindAction("MousePosition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Vampire
    private readonly InputActionMap m_Vampire;
    private IVampireActions m_VampireActionsCallbackInterface;
    private readonly InputAction m_Vampire_MoveKeyboard;
    private readonly InputAction m_Vampire_MouseClick;
    private readonly InputAction m_Vampire_MousePosition;
    public struct VampireActions
    {
        private @MainControls m_Wrapper;
        public VampireActions(@MainControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveKeyboard => m_Wrapper.m_Vampire_MoveKeyboard;
        public InputAction @MouseClick => m_Wrapper.m_Vampire_MouseClick;
        public InputAction @MousePosition => m_Wrapper.m_Vampire_MousePosition;
        public InputActionMap Get() { return m_Wrapper.m_Vampire; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(VampireActions set) { return set.Get(); }
        public void SetCallbacks(IVampireActions instance)
        {
            if (m_Wrapper.m_VampireActionsCallbackInterface != null)
            {
                @MoveKeyboard.started -= m_Wrapper.m_VampireActionsCallbackInterface.OnMoveKeyboard;
                @MoveKeyboard.performed -= m_Wrapper.m_VampireActionsCallbackInterface.OnMoveKeyboard;
                @MoveKeyboard.canceled -= m_Wrapper.m_VampireActionsCallbackInterface.OnMoveKeyboard;
                @MouseClick.started -= m_Wrapper.m_VampireActionsCallbackInterface.OnMouseClick;
                @MouseClick.performed -= m_Wrapper.m_VampireActionsCallbackInterface.OnMouseClick;
                @MouseClick.canceled -= m_Wrapper.m_VampireActionsCallbackInterface.OnMouseClick;
                @MousePosition.started -= m_Wrapper.m_VampireActionsCallbackInterface.OnMousePosition;
                @MousePosition.performed -= m_Wrapper.m_VampireActionsCallbackInterface.OnMousePosition;
                @MousePosition.canceled -= m_Wrapper.m_VampireActionsCallbackInterface.OnMousePosition;
            }
            m_Wrapper.m_VampireActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MoveKeyboard.started += instance.OnMoveKeyboard;
                @MoveKeyboard.performed += instance.OnMoveKeyboard;
                @MoveKeyboard.canceled += instance.OnMoveKeyboard;
                @MouseClick.started += instance.OnMouseClick;
                @MouseClick.performed += instance.OnMouseClick;
                @MouseClick.canceled += instance.OnMouseClick;
                @MousePosition.started += instance.OnMousePosition;
                @MousePosition.performed += instance.OnMousePosition;
                @MousePosition.canceled += instance.OnMousePosition;
            }
        }
    }
    public VampireActions @Vampire => new VampireActions(this);
    public interface IVampireActions
    {
        void OnMoveKeyboard(InputAction.CallbackContext context);
        void OnMouseClick(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
    }
}
